%!PS-Adobe-1.0
%%Title: Lisp History
%%DocumentFonts: Times-Roman Times-Bold Times-Italic Courier Courier-Bold Courier-Oblique
%%Creator: NCSA Mosaic, Postscript by Ameet Raval & Frans van Hoesel
%%Pages: (atend)
%%EndComments
save
/D {def} def /E {exch} D
/M {moveto} D
/S {show} D
/R {rmoveto} D
/L {lineto} D
/RL {rlineto} D
/SQ {newpath 0 0 M 0 1 L 1 1 L 1 0 L closepath} D
/U {gsave currentpoint currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath moveto
 dup stringwidth rlineto stroke grestore S } D
/B {/r E D gsave -13 0  R currentpoint 
  newpath r 0 360 arc closepath fill grestore } D
/OB {/r E D gsave -13 0  R currentpoint 
  newpath r 0 360 arc closepath stroke grestore } D
/NP {xmargin topmargin translate scalfac dup scale } D
/HR {/l E D gsave l 0 RL  stroke grestore } D
/SF {E findfont E scalefont setfont } D
/FF {/Courier } D
/FB {/Courier-Bold } D
/FI {/Courier-Oblique } D
/RF {/Times-Roman} D
/BF {/Times-Bold} D
/IF {/Times-Italic} D
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
/Encoding ISOLatin1Encoding D
currentdict end definefont
} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
[RF BF IF FF FB FI] {reencodeISO D} forall
/xmargin 43 D
/topmargin 720 D
/scalfac 0.57795 D
%%EndProlog
%%Page: 1 1
save
NP
0 -20 M
0 -1 R
gsave currentpoint 43 sub translate 0 -2 translate 68 47 scale
SQ fill
grestore
20 dict begin

/pix 64 string def

gsave currentpoint 43 sub translate 2 0 translate 64 43 scale
/cmap 11 string def


currentfile cmap readhexstring
ff 00 19 32 4c 7f 99 66 cc e5 
b2 
pop pop
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def
  { currentfile buffer readhexstring pop
	/bcount exch 0 get store
	bcount 128 ge
	{ 
	  0 1 bcount 128 sub
	{ currentfile buffer readhexstring pop pop
		/rgbval cmap buffer 0 get 1 getinterval store
		block exch rgbval putinterval
	  } for
	  block  0  bcount 127 sub  getinterval
	}
	{ 
	  currentfile buffer readhexstring pop pop
	  /rgbval cmap buffer 0 get 1 getinterval store
	  0 1 bcount { block exch rgbval putinterval } for
	  block 0 bcount 1 add getinterval
	} ifelse
  }
  image
} bind def
64 43 8
[64 0 0 -43 0 43]
rlecmapimage
130022010800
100001020103210401038102000400
0e0083010304058105062106010583070302000200
0d0085020405060809230985080a050402000100
0c00870204050a0900090821088709000908060402000000
0b00880104050800080a06052205870a08000806040200
0b008803050a000806070403210388040706080008050301
0200010105008301040609850906070301002100880102040608090a0702
83000103048204020003008702070a000a07030025008602070a00080503
8300030506830607020002008703050809060401002500830103050982090603
87010406090805030002008603050809050300270085030508090604
870104060908050300020086030508090503000800820102030b038102000d0082030509820906
03
8701040609080503000200860305080905030006008401030407050b05820402000b0086020706
09080503
87010406090805030002008603050809050300050086020407060a0809090983080503000a0087
02040508090a0702
870104060908050300020086030508090503000400860104050a0800090a098308050300060081
010289020304050a0008050401
870104060908050300020086030508090503000300870104050800080605810507090782040100
03008401030407058905060a08000805040200
8701040609080503000200860305080905030003008903070a0008060704030209028101000300
85020405060a08880809000908060402000000
87010406090805030002008603050809050300020089010406090806070201000f00860207050a
090009810908850806050402000100
8701040609080503000200860305080905030002008702070a000a070300100087020406080008
0a068106058405040301000200
870104060908050300020086030508090503000200870305080906040100100087030508000806
070481040383030201000300
8701040609080503000200860305080905030002008703050809060401000f008802070a090806
0403018101000700
8701040609080503000200860305080905030002008703050809060401000f0087030508090607
02000a00
8701040609080503000200860305080905030002008702070a000a0503000e0087010406090805
03000b00
8701040609080503000200860305080905030002008301040609850906070301000c0087010406
090a0502000b00
8701040609080503000200860305080905030003008903070a0008060704030282020100080087
010406000a0702000b00
870104060908050300020086030508090503000300880104050800090a06058505070403010006
0087010406000a0702000b00
870104060908050300020086030508090503000400870204050a0900090886080a060504020005
0087010406000a0702000b00
8701040609080503000200860305080905030005008502040506080901098600090a0607030004
0087010406000a0702000b00
870104060908050300020086030508090503000600830103040581050688060a08000806070200
030087010406000a0702000b00
8701040609080503000200860305080905030008008201020301038307050a0984090604020002
0087010406000a0702000b00
87010406090805030002008203050883080503000d00880203050a000805030002008701040600
0a0702000b00
87010406090805030002008202070683060702000e008801040608090604010001008701040600
0a0702000b00
8701040609080503000200820103048204030010008702070a000a070200010087010406000a07
02000b00
8701040609080503000400010112008702070a000a070200010087010406000a0702000b00
8300030509830905030019008702070a000a0702000100870104050a060702000b00
88000305080906040200170088010305080906040100020082020407820703000c00
890002070a0908050402001500880103070a090805030004008101028102000d00
8a0001040508000a05040302140283040706098409060702001600
0100830207060984090a060507140782050a0985090a050301001600
020087030706080009080a140a81080985090a050401001700
020087010307060a08090013000109850806050402001800
0400830204050681060a140a850605070301001900
05008201020481040713070104820302001b00
end
grestore
68 0 R
RF 17 SF
0 -13 R
( )U
BF 17 SF
(History of the Lisp Language)S
RF 17 SF
( )S
0 -68 M
797 HR
0 -87 M
0 -104 M
BF 24 SF
0 -20 R
(History of the Lisp Language)S
0 -132 M
0 -149 M
RF 17 SF
0 -13 R
(The following information is derived from the history section of dpANS Common Lisp. Lisp is a family of)S
0 -168 M
0 -13 R
(languages with a long history. Early key ideas in Lisp were developed by John McCarthy during the 1956)S
0 -187 M
0 -13 R
(Dartmouth Summer Research Project on Artificial Intelligence. McCarthy's motivation was to develop an)S
0 -206 M
0 -13 R
(algebraic list processing language for artificial intelligence work. Implementation efforts for early dialects of Lisp)S
0 -225 M
0 -13 R
(were undertaken on the IBM 704, the IBM 7090, the Digital Equipment Corporation \(DEC\) PDP-1, the DEC)S
0 -244 M
0 -13 R
(PDP-6, and the PDP-10. The primary dialect of Lisp between 1960 and 1965 was Lisp 1.5. By the early 1970's)S
0 -263 M
0 -13 R
(there were two predominant dialects of Lisp, both arising from these early efforts: MacLisp and Interlisp. For)S
0 -282 M
0 -13 R
(further information about very early Lisp dialects, see )S
IF 17 SF
(The Anatomy of Lisp)U
RF 17 SF
( or )S
IF 17 SF
(Lisp 1.5 Programmer's Manual)U
RF 17 SF
(.)S
0 -301 M
0 -318 M
0 -13 R
(MacLisp improved on the Lisp 1.5 notion of special variables and error handling. MacLisp also introduced the)S
0 -337 M
0 -13 R
(concept of functions that could take a variable number of arguments, macros, arrays, non-local dynamic exits, fast)S
0 -356 M
0 -13 R
(arithmetic, the first good Lisp compiler, and an emphasis on execution speed. For further information about)S
0 -375 M
0 -13 R
(Maclisp, see )S
IF 17 SF
(Maclisp Reference Manual, Revision 0)U
RF 17 SF
( or )S
IF 17 SF
(The Revised Maclisp Manual)U
RF 17 SF
(.)S
0 -394 M
0 -411 M
0 -13 R
(Interlisp introduced many ideas into Lisp programming environments and methodology. One of the Interlisp ideas)S
0 -430 M
0 -14 R
(that influenced Common Lisp was an iteration construct implemented by Warren Teitelman that inspired the )S
BF 17 SF
(loop)S
0 -450 M
RF 17 SF
0 -13 R
(macro used both on the Lisp Machines and in MacLisp, and now in Common Lisp. For further information about)S
0 -469 M
0 -13 R
(Interlisp, see )S
IF 17 SF
(Interlisp Reference Manual)U
RF 17 SF
(.)S
0 -488 M
0 -505 M
0 -13 R
(Although the first implementations of Lisp were on the IBM 704 and the IBM 7090, later work focussed on the)S
0 -524 M
0 -13 R
(DEC PDP-6 and, later, PDP-10 computers, the latter being the mainstay of Lisp and artificial intelligence work at)S
0 -543 M
0 -13 R
(such places as Massachusetts Institute of Technology \(MIT\), Stanford University, and Carnegie Mellon University)S
0 -562 M
0 -13 R
(\(CMU\) from the mid-1960's through much of the 1970's. The PDP-10 computer and its predecessor the PDP-6)S
0 -581 M
0 -13 R
(computer were, by design, especially well-suited to Lisp because they had 36-bit words and 18-bit addresses. This)S
0 -600 M
0 -13 R
(architecture allowed a cons cell to be stored in one word; single instructions could extract the car and cdr parts. The)S
0 -619 M
0 -13 R
(PDP-6 and PDP-10 had fast, powerful stack instructions that enabled fast function calling. But the limitations of)S
0 -638 M
0 -13 R
(the PDP-10 were evident by 1973: it supported a small number of researchers using Lisp, and the small, 18-bit)S
0 -657 M
0 -13 R
(address space \(262,144 36-bit words\) limited the size of a single program. One response to the address space)S
0 -676 M
0 -13 R
(problem was the Lisp Machine, a special-purpose computer designed to run Lisp programs. The other response was)S
0 -695 M
0 -13 R
(to use general-purpose computers with address spaces larger than 18 bits, such as the DEC VAX and the S-1 Mark)S
0 -714 M
0 -13 R
(IIA. For further information about S-1 Common Lisp, see )S
(``S-1 Common Lisp Implementation.'')U
0 -733 M
0 -750 M
0 -13 R
(The Lisp machine concept was developed in the late 1960's. In the early 1970's, Peter Deutsch, working with)S
0 -769 M
0 -13 R
(Daniel Bobrow, implemented a Lisp on the Alto, a single-user minicomputer, using microcode to interpret a)S
0 -788 M
0 -13 R
(byte-code implementation language. Shortly thereafter, Richard Greenblatt began work on a different hardware)S
0 -807 M
0 -13 R
(and instruction set design at MIT. Although the Alto was not a total success as a Lisp machine, a dialect of Interlisp)S
0 -826 M
0 -13 R
(known as Interlisp-D became available on the D-series machines manufactured by Xerox---the Dorado,)S
0 -845 M
0 -13 R
(Dandelion, Dandetiger, and Dove \(or Daybreak\). An upward-compatible extension of MacLisp called Lisp)S
0 -864 M
0 -13 R
(Machine Lisp became available on the early MIT Lisp Machines. Commercial Lisp machines from Xerox, Lisp)S
0 -883 M
0 -13 R
(Machines \(LMI\), and Symbolics were on the market by 1981. For further information about Lisp Machine Lisp, see)S
0 -902 M
IF 17 SF
0 -13 R
(Lisp Machine Manual)U
RF 17 SF
(.)S
0 -921 M
0 -938 M
0 -13 R
(During the late 1970's, Lisp Machine Lisp began to expand towards a much fuller language. Sophisticated lambda)S
0 -957 M
0 -14 R
(lists, )S
BF 17 SF
(setf)S
RF 17 SF
(, multiple values, and structures like those in Common Lisp are the results of early experimentation with)S
0 -977 M
0 -13 R
(programming styles by the Lisp Machine group. Jonl White and others migrated these features to MacLisp. Around)S
0 -996 M
0 -13 R
(1980, Scott Fahlman and others at CMU began work on a Lisp to run on the Scientific Personal Integrated)S
0 -1015 M
0 -13 R
(Computing Environment \(SPICE\) workstation. One of the goals of the project was to design a simpler dialect than)S
0 -1034 M
0 -13 R
(Lisp Machine Lisp.)S
0 -1053 M
0 -1070 M
0 -13 R
(The Macsyma group at MIT began a project during the late 1970's called the New Implementation of Lisp \(NIL\))S
0 -1089 M
0 -13 R
(for the VAX, which was headed by White. One of the stated goals of the NIL project was to fix many of the)S
0 -1108 M
0 -13 R
(historic, but annoying, problems with Lisp while retaining significant compatibility with MacLisp. At about the)S
0 -1127 M
0 -13 R
(same time, a research group at Stanford University and Lawrence Livermore National Laboratory headed by)S
showpage restore
%%Page: 2 2
save
NP
RF 17 SF
0 0 M
0 -13 R
(Richard P. Gabriel began the design of a Lisp to run on the S-1 Mark IIA supercomputer. S-1 Lisp, never)S
0 -19 M
0 -13 R
(completely functional, was the test bed for adapting advanced compiler techniques to Lisp implementation.)S
0 -38 M
0 -13 R
(Eventually the S-1 and NIL groups collaborated. For further information about the NIL project, see )S
(``NIL---A)U
0 -57 M
0 -13 R
(Perspective.'')U
0 -76 M
0 -93 M
0 -13 R
(The first effort towards Lisp standardization was made in 1969, when Anthony Hearn and Martin Griss at the)S
0 -112 M
0 -13 R
(University of Utah defined Standard Lisp---a subset of Lisp 1.5 and other dialects---to transport REDUCE, a)S
0 -131 M
0 -13 R
(symbolic algebra system. During the 1970's, the Utah group implemented first a retargetable optimizing compiler)S
0 -150 M
0 -13 R
(for Standard Lisp, and then an extended implementation known as Portable Standard Lisp \(PSL\). By the mid)S
0 -169 M
0 -13 R
(1980's, PSL ran on about a dozen kinds of computers. For further information about Standard Lisp, see )S
(``Standard)U
0 -188 M
0 -13 R
(LISP Report.'')U
0 -207 M
0 -224 M
0 -13 R
(PSL and Franz Lisp---a MacLisp-like dialect for Unix machines---were the first examples of widely available)S
0 -243 M
0 -13 R
(Lisp dialects on multiple hardware platforms.)S
0 -262 M
0 -279 M
0 -13 R
(One of the most important developments in Lisp occurred during the second half of the 1970's: Scheme. Scheme,)S
0 -298 M
0 -13 R
(designed by Gerald J. Sussman and Guy L. Steele Jr., is a simple dialect of Lisp whose design brought to Lisp some)S
0 -317 M
0 -13 R
(of the ideas from programming language semantics developed in the 1960's. Sussman was one of the prime)S
0 -336 M
0 -13 R
(innovators behind many other advances in Lisp technology from the late 1960's through the 1970's. The major)S
0 -355 M
0 -13 R
(contributions of Scheme were lexical scoping, lexical closures, first-class continuations, and simplified syntax \(no)S
0 -374 M
0 -13 R
(separation of value cells and function cells\). Some of these contributions made a large impact on the design of)S
0 -393 M
0 -13 R
(Common Lisp. For further information about Scheme, see )S
IF 17 SF
(IEEE Standard for the Scheme Programming Language)U
0 -412 M
RF 17 SF
0 -13 R
(or )S
(``Revised^4 Report on the Algorithmic Language Scheme.'')U
0 -431 M
0 -448 M
0 -13 R
(In the late 1970's object-oriented programming concepts started to make a strong impact on Lisp. At MIT, certain)S
0 -467 M
0 -13 R
(ideas from Smalltalk made their way into several widely used programming systems. Flavors, an object-oriented)S
0 -486 M
0 -13 R
(programming system with multiple inheritance, was developed at MIT for the Lisp machine community by)S
0 -505 M
0 -13 R
(Howard Cannon and others. At Xerox, the experience with Smalltalk and Knowledge Representation Language)S
0 -524 M
0 -13 R
(\(KRL\) led to the development of Lisp Object Oriented Programming System \(LOOPS\) and later Common LOOPS.)S
0 -543 M
0 -13 R
(For further information on Smalltalk, see )S
IF 17 SF
(Smalltalk-80: The Language and its Implementation)U
RF 17 SF
(. For further)S
0 -562 M
0 -13 R
(information on Flavors, see )S
(``Flavors: A Non-Hierarchical Approach to Object-Oriented Programming.'')U
0 -581 M
0 -598 M
0 -13 R
(These systems influenced the design of the Common Lisp Object System \(CLOS\). CLOS was developed)S
0 -617 M
0 -13 R
(specifically for X3J13's standardization effort, and was separately written up in )S
(``Common Lisp Object System)U
0 -636 M
0 -13 R
(Specification.'')U
( However, minor details of its design have changed slightly since that publication, and that paper)S
0 -655 M
0 -13 R
(should not be taken as an authoritative reference to the semantics of the Common Lisp Object System.)S
0 -674 M
0 -691 M
0 -13 R
(In 1980 Symbolics and LMI were developing Lisp Machine Lisp; stock-hardware implementation groups were)S
0 -710 M
0 -13 R
(developing NIL, Franz Lisp, and PSL; Xerox was developing Interlisp; and the SPICE project at CMU was)S
0 -729 M
0 -13 R
(developing a MacLisp-like dialect of Lisp called SpiceLisp.)S
0 -748 M
0 -765 M
0 -13 R
(In April 1981, after a DARPA-sponsored meeting concerning the splintered Lisp community, Symbolics, the)S
0 -784 M
0 -13 R
(SPICE project, the NIL project, and the S-1 Lisp project joined together to define Common Lisp. Initially)S
0 -803 M
0 -13 R
(spearheaded by White and Gabriel, the driving force behind this grassroots effort was provided by Fahlman, Daniel)S
0 -822 M
0 -13 R
(Weinreb, David Moon, Steele, and Gabriel. Common Lisp was designed as a description of a family of languages.)S
0 -841 M
0 -13 R
(The primary influences on Common Lisp were Lisp Machine Lisp, MacLisp, NIL, S-1 Lisp, Spice Lisp, and)S
0 -860 M
0 -13 R
(Scheme. )S
IF 17 SF
(Common Lisp: The Language)U
RF 17 SF
( is a description of that design. Its semantics were intentionally)S
0 -879 M
0 -13 R
(underspecified in places where it was felt that a tight specification would overly constrain Common Lisp research)S
0 -898 M
0 -13 R
(and use.)S
0 -917 M
0 -934 M
0 -13 R
(In 1986 X3J13 was formed as a technical working group to produce a draft for an ANSI Common Lisp standard.)S
0 -953 M
0 -13 R
(Because of the acceptance of Common Lisp, the goals of this group differed from those of the original designers.)S
0 -972 M
0 -13 R
(These new goals included stricter standardization for portability, an object-oriented programming system, a)S
0 -991 M
0 -13 R
(condition system, iteration facilities, and a way to handle large character sets. To accommodate those goals, a new)S
0 -1010 M
0 -13 R
(language specification was developed.)S
0 -1029 M
0 -1046 M
797 HR
0 -1065 M
0 -13 R
([Note: Gabriel and Steele's )S
0 13 R
gsave currentpoint 23 sub translate 0 -2 translate 24 27 scale
SQ fill
grestore
20 dict begin

/pix 3 string def

gsave currentpoint 23 sub translate 2 0 translate 20 23 scale
20 23 1
[20 0 0 -23 0 23]

{currentfile pix readhexstring pop}
image
ffffffffffffffffffffffff80001fbfffcfa210cfa2104fa7324fa3324fa3304fa730cfa733cf
a733cfbfffcf80000fc0000fffffffdfffbf80001f00000f80001fdfffbf
end
grestore
24 0 R
0 -13 R
("The Evolution of Lisp")U
( 1993 ACM History of Programming Languages)S
0 -1092 M
0 -13 R
(conference, is also available - miller] )S
0 -1111 M
797 HR
0 -1130 M
0 -13 R
(This page was extracted from the Common Lisp specification by: )S
showpage restore
%%Page: 3 3
save
NP
RF 17 SF
0 0 M
IF 17 SF
0 -13 R
(kmp@harlequin.com \(Kent M Pitman\))S
0 -19 M
RF 17 SF
0 -13 R
(Ongoing maintenance of this page is being done by: )S
0 -38 M
IF 17 SF
0 -13 R
(miller@cs.rochester.edu \(Brad Miller\))U
0 -57 M
0 -13 R
(Last Update: 22 June 1994 / Brad Miller)S
showpage restore
%%Trailer
restore
%%Pages: 3
