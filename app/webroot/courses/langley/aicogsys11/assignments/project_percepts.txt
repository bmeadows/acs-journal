# Course Project: Actions, Percepts and Concepts

The following actions, percepts and concepts will be supplied with the
Twig environment you will use for the project. Please check this list
periodically, as it may change before the environment is available.

## Actions

These actions are defined in Lisp, and are intended to be used in
Icarus skill definitions. 

 - `(*parse-message message)`: parses `message`, and generates the
    relevant percept (i.e., `(offer-buy ...)`, `(offer-sell ...)`,
    etc). Note that `message` should *only* come from the `message`
    part of the `twig.dialog` percept.
 - `(*offer-buy object seller buyer &optional (price 9))`: creates an
   `(offer-buy ..)` percept in the perceptual buffer of both `seller`
   and `buyer`, where `buyer` is offering to buy `object` from
   `seller` for `price`. In this case, `price` may be `nil`, in which
   case it defaults to 9.
 - `(*offer-sell object seller buyer &optional (price 9))`: creates an
   `(offer-sell ..)` percept in the perceptual buffer of both `seller`
   and `buyer`, where `seller` is offering to sell `object` to `buyer`
   for `price`. In this case, `price` may be `nil`, in which case it
   defaults to 9.
 - `(*accept-offer to from price object offer)`: creates an
   `(offer-accept ...)` percept in the perceptual buffer of both
   `from` and `to`, where `from` is the agent accepting `to`'s offer
   `offer` (of `price` for `object`).
 - `(*reject-offer to from price object offer)`: creates an
   `(offer-reject ...)` percept in the perceptual buffer of both
   `from` and `to`, where `from` is the agent rejecting `to`'s offer
   `offer` (of `price` for `object`).
 - `(*update-price amt)`: increments the agent's current selling or
   buying price by `amt`. (To decrease the price, `amt` should be
   negative.)
 - `(*store-doll doll)`: causes the doll to be "stored" in the
   collector's safe; i.e., the doll is deleted from the environment,
   and a new doll spawns in the environment at random.

## Percepts

These percepts are available to all agents. Some of these are
generated by the Twig environment, and will be familiar; others,
however, are generated as the result of actions, and have a different
structure. 

 - `(twig.dialog ?d message ?m speaker ?s listener ?l)`: generated
   whenever an agent speaks out loud. Note that *every* agent will
   perceive dialogs, even if they are not directed to them. This means
   you should check whether an agent is either the speaker or listener
   when inferring beliefs about a dialog. In this percept:
    - `?d` is the unique ID of this dialog (which should not be
      necessary for this project);
    - `?m` is the message content (which may be parsed with
      `(*parse-message ?m)`, described above);
    - `?s` is the agent speaking the message; and
    - `?l` is the intended audience (another agent).
 - `(offer-buy ?o object ?d seller ?s buyer ?b price ?p until ?u)`:
   perceived by both `?s` and `?b` when `?b` executes `(*offer-buy ?d
   ?s ?b ?p)`, offering to buy `?d` from `?s` for `?p`. `?o` is a
   unique identifier used to refer to this offer. **Note:** `?u` is
   used internally, and does not need to be referenced for the
   project.
 - `(offer-sell ?o object ?d seller ?s buyer ?b price ?p until ?u)`:
   perceived by both `?s` and `?b` when `?b` executes `(*offer-sell ?d
   ?s ?b ?p)`, offering to sell `?d` to `?b` for `?p`. `?o` is a
   unique identifier used to refer to this offer. **Note:** `?u` is
   used internally, and does not need to be referenced for the
   project.
 - `(offer-accept ?o from ?f to ?t until ?u)`: perceived by both `?f`
   and `?t` when `?f` executes `(*accept-offer ?t ?f ...)`,
   communicating acceptance of offer `?o`. **Note:** `?u` is used
   internally, and does not need to be referenced for the project. 
 - `(offer-reject ?o from ?f to ?t until ?u)`: perceived by both `?f`
   and `?t` when `?f` executes `(*reject-offer ?t ?f ...)`,
   communicating rejection of offer `?o`. **Note:** `?u` is used
   internally, and does not need to be referenced for the project. 
   
## Concepts

These concepts are available to all agents. You will *not* have to
write these concepts; they are provided with the environment as a
convenience to you. 

 - `(me ?agent)`: this concept is inferred whenever `?agent` is the
   perceiving agent.
 - `(innocent ?agent)`: this concept is inferred whenever `?agent` is
   an innocent.
 - `(collector ?agent)`: this concept is inferred whenever `?agent` is
   a collector.
 - `(capitalist ?agent)`: this concept is inferred whenever `?agent`
   is a capitalist.
